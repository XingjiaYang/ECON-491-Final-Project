thresh = 1e-10,
maxit = 1e6,
lambda.min.ratio = 1e-5,
nlambda = 1000,
standardize = FALSE)
set.seed(123)
cv_model_mlr_lasso = cv.glmnet(X, Y, alpha = 1,
nfolds = 10,
type.measure = "mse",
thresh = 1e-10,
maxit = 1e6,
lambda.min.ratio = 1e-5,
nlambda = 1000,
standardize = FALSE)
X_test = model.matrix(INTRATE ~ ., data = set_test)[, -1]
pred_lasso = predict(cv_model_mlr_lasso, newx = X_test, s = cv_model_mlr_lasso$lambda.min)
rmse(actual = set_test %>% pull(INTRATE), pred = pred_lasso)
pred_ridge = predict(cv_model_mlr_ridge, newx = X_test, s = cv_model_mlr_ridge$lambda.min)
rmse(actual = set_test %>% pull(INTRATE), pred = pred_ridge)
pred_ridge = predict(cv_model_mlr_ridge, newx = X_test, s = cv_model_mlr_ridge$lambda.min)
rmse(actual = set_test %>% pull(INTRATE), pred = pred_ridge)
workflow_final_elastic_net = finalize_workflow(
workflow_elastic_net,
best_params_elastic_net
)
final_fit = fit(workflow_final_elastic_net, data = set_training)
pred_elastic_net = predict(final_fit, new_data = set_test)$.pred
rmse(actual = set_test %>% pull(INTRATE), pred = pred_elastic_net)
knitr::opts_chunk$set(echo = TRUE)
require(doParallel)
cl = makeCluster(detectCores() - 1)
registerDoParallel(cl)
require(tidyverse)
raw = read_csv("mortgage.csv")
sum(is.na(raw))
df_cleaned = raw %>%
mutate(across(
.cols = everything(),
.fns = ~ {
all_quoted = all(grepl("^'.*'$", .x[!is.na(.x)]))
if (all_quoted) {
as.factor(str_remove_all(.x, "^'|'$"))
} else {
suppressWarnings(as.numeric(.x))
}
}
)
)
df_cleaned$MORTLINE = as.factor(df_cleaned$MORTLINE)
for (i in 1:37) {
if (length(unique(df_cleaned[[i]])) == 1) {
df_cleaned[, i] = NA
}
}
df_cleaned = df_cleaned %>%
select(where(~ !all(is.na(.x))))
df_cleaned = df_cleaned %>%
select(-CONTROL)
set.seed(123)
set_full = df_cleaned %>%
mutate(id = 1:16834)
set_training = set_full %>%
slice_sample(prop = 0.8)
set_test = set_full %>%
anti_join(set_training) %>%
select(-id)
set_training = set_training %>%
select(-id)
require(patchwork)
plots = list()
for (i in 1:29) {
var_name <- names(set_training)[i]
x_var <- set_training[[i]]
if (is.factor(x_var)) {
p = ggplot(set_training, aes(x = factor(.data[[var_name]]), y = INTRATE)) +
geom_boxplot() +
theme_minimal() +
labs(x = var_name, y = "Interest Rate")
} else {
p = ggplot(set_training, aes(x = .data[[var_name]], y = INTRATE)) +
geom_point(alpha = 0.6) +
theme_minimal() +
labs(x = var_name, y = "Interest Rate")
}
plots[[i]] = p
}
print(plots)
model_mlr_full = lm(INTRATE ~ ., data = set_training)
summary(model_mlr_full)
require(glmnet)
set.seed(123)
X = model.matrix(INTRATE ~ ., data = set_training)[, -1]
Y = set_training$INTRATE
model_mlr_lasso = glmnet(X, Y, alpha = 1)
plot(model_mlr_lasso, xvar = "lambda", label = TRUE)
set.seed(123)
cv_model_mlr_lasso = cv.glmnet(X, Y, alpha = 1,
nfolds = 10,
type.measure = "mse",
thresh = 1e-10,
maxit = 1e6,
lambda.min.ratio = 1e-5,
nlambda = 1000,
standardize = FALSE)
set.seed(123)
model_mlr_ridge = glmnet(X, Y, alpha = 0)
plot(model_mlr_ridge, xvar = "lambda", label = TRUE)
set.seed(123)
cv_model_mlr_ridge = cv.glmnet(X, Y, alpha = 0,
nfolds = 10,
type.measure = "mse",
thresh = 1e-10,
maxit = 1e6,
lambda.min.ratio = 1e-5,
nlambda = 1000,
standardize = FALSE)
require(tidymodels)
if (file.exists("objects/tuned_elastic_net.rds")) {
model_elastic_net = readRDS("objects/model_elastic_net.rds")
recipe_elastic_net = readRDS("objects/recipe_elastic_net.rds")
cv_model_mlr_elastic_net = readRDS("objects/cv_model_mlr_elastic_net.rds")
workflow_elastic_net = readRDS("objects/workflow_elastic_net.rds")
grid_elastic_net = readRDS("objects/grid_elastic_net.rds")
tuned_elastic_net = readRDS("objects/tuned_elastic_net.rds")
} else {
set.seed(123)
model_elastic_net = linear_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet", standardize = FALSE)
recipe_elastic_net = recipe(INTRATE ~ ., data = set_training) %>%
step_dummy(all_nominal_predictors())
cv_model_mlr_elastic_net = vfold_cv(set_training, v = 10)
workflow_elastic_net = workflow() %>%
add_model(model_elastic_net) %>%
add_recipe(recipe_elastic_net)
grid_elastic_net = grid_regular(
penalty(range = c(-4, 1)),
mixture(range = c(0, 1)),
levels = c(penalty = 100, mixture = 100)
)
tuned_elastic_net = tune_grid(
workflow_elastic_net,
resamples = cv_model_mlr_elastic_net,
grid = grid_elastic_net,
metrics = metric_set(yardstick::rmse)
)
saveRDS(model_elastic_net, "objects/model_elastic_net.rds")
saveRDS(recipe_elastic_net, "objects/recipe_elastic_net.rds")
saveRDS(cv_model_mlr_elastic_net, "objects/cv_model_mlr_elastic_net.rds")
saveRDS(workflow_elastic_net, "objects/workflow_elastic_net.rds")
saveRDS(grid_elastic_net, "objects/grid_elastic_net.rds")
saveRDS(tuned_elastic_net, "objects/tuned_elastic_net.rds")
}
best_params_elastic_net = select_best(tuned_elastic_net, metric = "rmse")
best_params_elastic_net
rmse = function(actual, pred) {
sqrt(mean((actual - pred) ** 2))
}
pred_mlr = predict(model_mlr_full, newdata = set_test)
rmse(actual = set_test %>% pull(INTRATE), pred = pred_mlr)
X_test = model.matrix(INTRATE ~ ., data = set_test)[, -1]
pred_lasso = predict(cv_model_mlr_lasso, newx = X_test, s = cv_model_mlr_lasso$lambda.min)
rmse(actual = set_test %>% pull(INTRATE), pred = pred_lasso)
pred_ridge = predict(cv_model_mlr_ridge, newx = X_test, s = cv_model_mlr_ridge$lambda.min)
rmse(actual = set_test %>% pull(INTRATE), pred = pred_ridge)
workflow_final_elastic_net = finalize_workflow(
workflow_elastic_net,
best_params_elastic_net
)
final_fit = fit(workflow_final_elastic_net, data = set_training)
pred_elastic_net = predict(final_fit, new_data = set_test)$.pred
rmse(actual = set_test %>% pull(INTRATE), pred = pred_elastic_net)
X_test_scaled = model.matrix(INTRATE ~ ., data = set_test_scaled)[, -1]
pred_lasso_scaled = predict(cv_model_mlr_lasso_scaled, newx = X_test_scaled, s = cv_model_mlr_lasso_scaled$lambda.min)
rmse(actual = set_test_scaled %>% pull(INTRATE), pred = pred_lasso_scaled)
pred_ridge = predict(cv_model_mlr_ridge_scaled, newx = X_test_scaled, s = cv_model_mlr_ridge_scaled$lambda.min)
rmse(actual = set_test_scaled %>% pull(INTRATE), pred = pred_ridge_scaled)
pred_ridge_scaled = predict(cv_model_mlr_ridge_scaled, newx = X_test_scaled, s = cv_model_mlr_ridge_scaled$lambda.min)
rmse(actual = set_test_scaled %>% pull(INTRATE), pred = pred_ridge_scaled)
workflow_final_elastic_net_scaled = finalize_workflow(
workflow_elastic_net_scaled,
best_params_elastic_net_scaled
)
final_fit_scaled = fit(workflow_final_elastic_net_scaled, data = set_training_scaled)
pred_elastic_net_scaled = predict(final_fit_scaled, new_data = set_test_scaled)$.pred
rmse(actual = set_test_scaled %>% pull(INTRATE), pred = pred_elastic_net_scaled)
if (file.exists("scaled_objs/tuned_knn_scaled.rds")) {
model_knn_scaled = readRDS("scaled_objs/model_knn_scaled.rds")
recipe_knn_scaled = readRDS("scaled_objs/recipe_knn_scaled.rds")
workflow_knn_scaled = readRDS("scaled_objs/workflow_knn_scaled.rds")
cv_model_knn_scaled = readRDS("scaled_objs/cv_model_knn_scaled.rds")
grid_knn_scaled = readRDS("scaled_objs/grid_knn_scaled.rds")
tuned_knn_scaled = readRDS("scaled_objs/tuned_knn_scaled.rds")
} else {
set.seed(123)
model_knn_scaled = nearest_neighbor(
mode = "regression",
neighbors = tune(),
weight_func = "rectangular"
) %>%
set_engine("kknn_scaled")
recipe_knn_scaled = recipe(INTRATE ~ ., data = set_training_scaled)# %>% step_normalize(all_predictors())
workflow_knn_scaled = workflow() %>%
add_model(model_knn_scaled) %>%
add_recipe(recipe_knn_scaled)
cv_model_knn_scaled = vfold_cv(set_training_scaled, v = 10)
grid_knn_scaled = tibble(neighbors = 1:30)
tuned_knn_scaled = tune_grid(
workflow_knn_scaled,
resamples = cv_model_knn_scaled,
grid = grid_knn_scaled,
metrics = metric_set(yardstick::rmse),
control = control_grid(save_pred = TRUE)
)
saveRDS(model_knn_scaled, "scaled_objs/model_knn_scaled.rds")
saveRDS(recipe_knn_scaled, "scaled_objs/recipe_knn_scaled.rds")
saveRDS(workflow_knn_scaled, "scaled_objs/workflow_knn_scaled.rds")
saveRDS(cv_model_knn_scaled, "scaled_objs/cv_model_knn_scaled.rds")
saveRDS(grid_knn_scaled, "scaled_objs/grid_knn_scaled.rds")
saveRDS(tuned_knn_scaled, "scaled_objs/tuned_knn_scaled.rds")
}
if (file.exists("scaled_objs/tuned_knn_scaled.rds")) {
model_knn_scaled = readRDS("scaled_objs/model_knn_scaled.rds")
recipe_knn_scaled = readRDS("scaled_objs/recipe_knn_scaled.rds")
workflow_knn_scaled = readRDS("scaled_objs/workflow_knn_scaled.rds")
cv_model_knn_scaled = readRDS("scaled_objs/cv_model_knn_scaled.rds")
grid_knn_scaled = readRDS("scaled_objs/grid_knn_scaled.rds")
tuned_knn_scaled = readRDS("scaled_objs/tuned_knn_scaled.rds")
} else {
set.seed(123)
model_knn_scaled = nearest_neighbor(
mode = "regression",
neighbors = tune(),
weight_func = "rectangular"
) %>%
set_engine("kknn")
recipe_knn_scaled = recipe(INTRATE ~ ., data = set_training_scaled)# %>% step_normalize(all_predictors())
workflow_knn_scaled = workflow() %>%
add_model(model_knn_scaled) %>%
add_recipe(recipe_knn_scaled)
cv_model_knn_scaled = vfold_cv(set_training_scaled, v = 10)
grid_knn_scaled = tibble(neighbors = 1:30)
tuned_knn_scaled = tune_grid(
workflow_knn_scaled,
resamples = cv_model_knn_scaled,
grid = grid_knn_scaled,
metrics = metric_set(yardstick::rmse),
control = control_grid(save_pred = TRUE)
)
saveRDS(model_knn_scaled, "scaled_objs/model_knn_scaled.rds")
saveRDS(recipe_knn_scaled, "scaled_objs/recipe_knn_scaled.rds")
saveRDS(workflow_knn_scaled, "scaled_objs/workflow_knn_scaled.rds")
saveRDS(cv_model_knn_scaled, "scaled_objs/cv_model_knn_scaled.rds")
saveRDS(grid_knn_scaled, "scaled_objs/grid_knn_scaled.rds")
saveRDS(tuned_knn_scaled, "scaled_objs/tuned_knn_scaled.rds")
}
best_k_scaled = select_best(tuned_knn_scaled, metric = "rmse")
best_k_scaled
workflow_final_knnscaled = finalize_workflow(workflow_knnscaled, best_kscaled)
workflow_final_knn_scaled = finalize_workflow(workflow_knn_scaled, best_kscaled)
workflow_final_knn_scaled = finalize_workflow(workflow_knn_scaled, best_k_scaled)
final_fit_knn_scaled = fit(workflow_final_knn_scaled, data = set_training_scaled)
pred_knn_scaled = predict(final_fit_knn_scaled, new_data = set_test_scaled)$.pred
rmse(actual = set_test_scaled %>% pull(INTRATE), pred = pred_knn_scaled)
knitr::opts_chunk$set(echo = TRUE)
require(doParallel)
cl = makeCluster(detectCores() - 1)
registerDoParallel(cl)
require(kknn)
if (file.exists("objects/tuned_knn.rds")) {
model_knn = readRDS("objects/model_knn.rds")
recipe_knn = readRDS("objects/recipe_knn.rds")
workflow_knn = readRDS("objects/workflow_knn.rds")
cv_model_knn = readRDS("objects/cv_model_knn.rds")
grid_knn = readRDS("objects/grid_knn.rds")
tuned_knn = readRDS("objects/tuned_knn.rds")
} else {
set.seed(123)
model_knn = nearest_neighbor(
mode = "regression",
neighbors = tune(),
weight_func = "rectangular"
) %>%
set_engine("kknn")
recipe_knn = recipe(INTRATE ~ ., data = set_training)# %>% step_normalize(all_predictors())
workflow_knn = workflow() %>%
add_model(model_knn) %>%
add_recipe(recipe_knn)
cv_model_knn = vfold_cv(set_training, v = 10)
grid_knn = tibble(neighbors = 1:30)
tuned_knn = tune_grid(
workflow_knn,
resamples = cv_model_knn,
grid = grid_knn,
metrics = metric_set(yardstick::rmse),
control = control_grid(save_pred = TRUE)
)
saveRDS(model_knn, "objects/model_knn.rds")
saveRDS(recipe_knn, "objects/recipe_knn.rds")
saveRDS(workflow_knn, "objects/workflow_knn.rds")
saveRDS(cv_model_knn, "objects/cv_model_knn.rds")
saveRDS(grid_knn, "objects/grid_knn.rds")
saveRDS(tuned_knn, "objects/tuned_knn.rds")
}
best_k = select_best(tuned_knn, metric = "rmse")
best_k
if (file.exists("scaled_objs/tuned_knn_scaled.rds")) {
model_knn_scaled = readRDS("scaled_objs/model_knn_scaled.rds")
recipe_knn_scaled = readRDS("scaled_objs/recipe_knn_scaled.rds")
workflow_knn_scaled = readRDS("scaled_objs/workflow_knn_scaled.rds")
cv_model_knn_scaled = readRDS("scaled_objs/cv_model_knn_scaled.rds")
grid_knn_scaled = readRDS("scaled_objs/grid_knn_scaled.rds")
tuned_knn_scaled = readRDS("scaled_objs/tuned_knn_scaled.rds")
} else {
set.seed(123)
model_knn_scaled = nearest_neighbor(
mode = "regression",
neighbors = tune(),
weight_func = "rectangular"
) %>%
set_engine("kknn")
recipe_knn_scaled = recipe(INTRATE ~ ., data = set_training_scaled)# %>% step_normalize(all_predictors())
workflow_knn_scaled = workflow() %>%
add_model(model_knn_scaled) %>%
add_recipe(recipe_knn_scaled)
cv_model_knn_scaled = vfold_cv(set_training_scaled, v = 10)
grid_knn_scaled = tibble(neighbors = 1:30)
tuned_knn_scaled = tune_grid(
workflow_knn_scaled,
resamples = cv_model_knn_scaled,
grid = grid_knn_scaled,
metrics = metric_set(yardstick::rmse),
control = control_grid(save_pred = TRUE)
)
saveRDS(model_knn_scaled, "scaled_objs/model_knn_scaled.rds")
saveRDS(recipe_knn_scaled, "scaled_objs/recipe_knn_scaled.rds")
saveRDS(workflow_knn_scaled, "scaled_objs/workflow_knn_scaled.rds")
saveRDS(cv_model_knn_scaled, "scaled_objs/cv_model_knn_scaled.rds")
saveRDS(grid_knn_scaled, "scaled_objs/grid_knn_scaled.rds")
saveRDS(tuned_knn_scaled, "scaled_objs/tuned_knn_scaled.rds")
}
best_k_scaled = select_best(tuned_knn_scaled, metric = "rmse")
best_k_scaled
set.seed(123)
model_knn = nearest_neighbor(
mode = "regression",
neighbors = tune(),
weight_func = "rectangular"
) %>%
set_engine("kknn", scale = FALSE)
recipe_knn = recipe(INTRATE ~ ., data = set_training)# %>% step_normalize(all_predictors())
workflow_knn = workflow() %>%
add_model(model_knn) %>%
add_recipe(recipe_knn)
cv_model_knn = vfold_cv(set_training, v = 10)
grid_knn = tibble(neighbors = 1:30)
tuned_knn = tune_grid(
workflow_knn,
resamples = cv_model_knn,
grid = grid_knn,
metrics = metric_set(yardstick::rmse),
control = control_grid(save_pred = TRUE)
)
saveRDS(model_knn, "objects/model_knn.rds")
saveRDS(recipe_knn, "objects/recipe_knn.rds")
saveRDS(workflow_knn, "objects/workflow_knn.rds")
saveRDS(cv_model_knn, "objects/cv_model_knn.rds")
saveRDS(cv_model_knn, "objects/cv_model_knn.rds")
saveRDS(grid_knn, "objects/grid_knn.rds")
saveRDS(grid_knn, "objects/grid_knn.rds")
saveRDS(tuned_knn, "objects/tuned_knn.rds")
best_k = select_best(tuned_knn, metric = "rmse")
best_k
workflow_final_knn = finalize_workflow(workflow_knn, best_k)
final_fit_knn = fit(workflow_final_knn, data = set_training)
pred_knn = predict(final_fit_knn, new_data = set_test)$.pred
rmse(actual = set_test %>% pull(INTRATE), pred = pred_knn)
# kernel == linear
if (file.exists("scaled_objs/tuned_svr_linear_scaled.rds")) {
model_svr_linear_scaled = readRDS("scaled_objs/model_svr_linear_scaled.rds")
recipe_svr_linear_scaled = readRDS("scaled_objs/recipe_svr_linear_scaled.rds")
workflow_svr_linear_scaled = readRDS("scaled_objs/workflow_svr_linear_scaled.rds")
cv_model_svr_linear_scaled = readRDS("scaled_objs/cv_model_svr_linear_scaled.rds")
grid_svr_linear_scaled = readRDS("scaled_objs/grid_svr_linear_scaled.rds")
tuned_svr_linear_scaled = readRDS("scaled_objs/tuned_svr_linear_scaled.rds")
} else {
set.seed(123)
model_svr_linear_scaled = svm_linear(
mode = "regression",
cost = tune()
) %>%
set_engine("kernlab")
recipe_svr_linear_scaled = recipe(INTRATE ~ ., data = set_training_scaled)
workflow_svr_linear_scaled = workflow() %>%
add_model(model_svr_linear_scaled) %>%
add_recipe(recipe_svr_linear_scaled)
cv_model_svr_linear_scaled = vfold_cv(set_training_scaled, v = 10)
grid_svr_linear_scaled = tibble(
cost = c(1e-4, 1e-3, 1e-2, 1e-1, 1, 1e1, 1e2, 1e3, 1e4)
)
tuned_svr_linear_scaled = tune_grid(
workflow_svr_linear_scaled,
resamples = cv_model_svr_linear_scaled,
grid = grid_svr_linear_scaled,
metrics = metric_set(yardstick::rmse),
control = control_grid(save_pred = TRUE)
)
saveRDS(model_svr_linear_scaled, "scaled_objs/model_svr_linear_scaled.rds")
saveRDS(recipe_svr_linear_scaled, "scaled_objs/recipe_svr_linear_scaled.rds")
saveRDS(workflow_svr_linear_scaled, "scaled_objs/workflow_svr_linear_scaled.rds")
saveRDS(cv_model_svr_linear_scaled, "scaled_objs/cv_model_svr_linear_scaled.rds")
saveRDS(grid_svr_linear_scaled, "scaled_objs/grid_svr_linear_scaled.rds")
saveRDS(tuned_svr_linear_scaled, "scaled_objs/tuned_svr_linear_scaled.rds")
}
# Kernel == Polynomial
if (file.exists("scaled_objs/tuned_svr_poly_scaled.rds")) {
model_svr_poly_scaled = readRDS("scaled_objs/model_svr_poly_scaled.rds")
recipe_svr_poly_scaled = readRDS("scaled_objs/recipe_svr_poly_scaled.rds")
workflow_svr_poly_scaled = readRDS("scaled_objs/workflow_svr_poly_scaled.rds")
cv_model_svr_poly_scaled = readRDS("scaled_objs/cv_model_svr_poly_scaled.rds")
grid_svr_poly_scaled = readRDS("scaled_objs/grid_svr_poly_scaled.rds")
tuned_svr_poly_scaled = readRDS("scaled_objs/tuned_svr_poly_scaled.rds")
} else {
set.seed(123)
model_svr_poly_scaled = svm_poly(
mode = "regression",
cost = tune(),
degree = tune()
) %>%
set_engine("kernlab")
recipe_svr_poly_scaled = recipe(INTRATE ~ ., data = set_training_scaled)# %>% step_normalize(all_predictors())
# I do not normalize the data since I will do it later and compared them.
workflow_svr_poly_scaled = workflow() %>%
add_model(model_svr_poly_scaled) %>%
add_recipe(recipe_svr_poly_scaled)
cv_model_svr_poly_scaled = vfold_cv(set_training_scaled, v = 10)
grid_svr_poly_scaled = crossing(
cost = c(1e-4, 1e-3, 1e-2, 1e-1, 1, 1e1, 1e2, 1e3, 1e4),
degree = c(2L, 3L, 4L, 5L)
)
tuned_svr_poly_scaled = tune_grid(
workflow_svr_poly_scaled,
resamples = cv_model_svr_poly_scaled,
grid = grid_svr_poly_scaled,
metrics = metric_set(yardstick::rmse),
control = control_grid(save_pred = TRUE)
)
saveRDS(model_svr_poly_scaled, "scaled_objs/model_svr_poly_scaled.rds")
saveRDS(recipe_svr_poly_scaled, "scaled_objs/recipe_svr_poly_scaled.rds")
saveRDS(workflow_svr_poly_scaled, "scaled_objs/workflow_svr_poly_scaled.rds")
saveRDS(cv_model_svr_poly_scaled, "scaled_objs/cv_model_svr_poly_scaled.rds")
saveRDS(grid_svr_poly_scaled, "scaled_objs/grid_svr_poly_scaled.rds")
saveRDS(tuned_svr_poly_scaled, "scaled_objs/tuned_svr_poly_scaled.rds")
}
# Kernel == Radial
if (file.exists("scaled_objs/tuned_svr_rbf_scaled.rds")) {
model_svr_rbf_scaled = readRDS("scaled_objs/model_svr_rbf_scaled.rds")
recipe_svr_rbf_scaled = readRDS("scaled_objs/recipe_svr_rbf_scaled.rds")
workflow_svr_rbf_scaled = readRDS("scaled_objs/workflow_svr_rbf_scaled.rds")
cv_model_svr_rbf_scaled = readRDS("scaled_objs/cv_model_svr_rbf_scaled.rds")
grid_svr_rbf_scaled = readRDS("scaled_objs/grid_svr_rbf_scaled.rds")
tuned_svr_rbf_scaled = readRDS("scaled_objs/tuned_svr_rbf_scaled.rds")
} else {
set.seed(123)
model_svr_rbf_scaled = svm_rbf(
mode = "regression",
cost = tune(),
rbf_sigma = tune()
) %>%
set_engine("kernlab")
recipe_svr_rbf_scaled = recipe(INTRATE ~ ., data = set_training_scaled)# %>% step_normalize(all_predictors())
# I do not normalize the data since I will do it later and compared them.
workflow_svr_rbf_scaled = workflow() %>%
add_model(model_svr_rbf_scaled) %>%
add_recipe(recipe_svr_rbf_scaled)
cv_model_svr_rbf_scaled = vfold_cv(set_training_scaled, v = 10)
grid_svr_rbf_scaled = grid_latin_hypercube(
cost(range = c(-4, 4)),
rbf_sigma(range = c(-3, 1)),
size = 40
)
tuned_svr_rbf_scaled = tune_grid(
workflow_svr_rbf_scaled,
resamples = cv_model_svr_rbf_scaled,
grid = grid_svr_rbf_scaled,
metrics = metric_set(yardstick::rmse),
control = control_grid(save_pred = TRUE)
)
saveRDS(model_svr_rbf_scaled, "scaled_objs/model_svr_rbf_scaled.rds")
saveRDS(recipe_svr_rbf_scaled, "scaled_objs/recipe_svr_rbf_scaled.rds")
saveRDS(workflow_svr_rbf_scaled, "scaled_objs/workflow_svr_rbf_scaled.rds")
saveRDS(cv_model_svr_rbf_scaled, "scaled_objs/cv_model_svr_rbf_scaled.rds")
saveRDS(grid_svr_rbf_scaled, "scaled_objs/grid_svr_rbf_scaled.rds")
saveRDS(tuned_svr_rbf_scaled, "scaled_objs/tuned_svr_rbf_scaled.rds")
}
best_params_svr_linear_scaled = select_best(tuned_svr_linear_scaled, metric = "rmse")
best_params_svr_poly_scaled = select_best(tuned_svr_poly_scaled, metric = "rmse")
best_params_svr_rbf_scaled = select_best(tuned_svr_rbf_scaled, metric = "rmse")
workflow_final_svr_linear_scaled = finalize_workflow(workflow_svr_linear_scaled, best_params_svr_linear_scaled)
workflow_final_svr_poly_scaled = finalize_workflow(workflow_svr_poly_scaled, best_params_svr_poly_scaled)
workflow_final_svr_rbf_scaled = finalize_workflow(workflow_svr_rbf_scaled, best_params_svr_rbf_scaled)
final_fit_svr_linear_scaled = fit(workflow_final_svr_linear_scaled, data = set_training_scaled)
final_fit_svr_poly_scaled = fit(workflow_final_svr_poly_scaled, data = set_training_scaled)
final_fit_svr_rbf_scaled = fit(workflow_final_svr_rbf_scaled, data = set_training_scaled)
pred_svr_linear_scaled = predict(final_fit_svr_linear_scaled, new_data = set_test_scaled)$.pred
pred_svr_poly_scaled = predict(final_fit_svr_poly_scaled, new_data = set_test_scaled)$.pred
pred_svr_rbf_scaled = predict(final_fit_svr_rbf_scaled, new_data = set_test_scaled)$.pred
# RMSE of kernel == linear
rmse(actual = set_test_scaled %>% pull(INTRATE), pred_svr_linear_scaled)
# RMSE of kernel == polynomial
rmse(actual = set_test_scaled %>% pull(INTRATE), pred_svr_poly_scaled)
# RMSE of kernel == radian
rmse(actual = set_test_scaled %>% pull(INTRATE), pred_svr_rbf_scaled)
