cv_model_mlr_ridge$lambda.1se
require(tidymodels)
knitr::opts_chunk$set(echo = TRUE)
require(doParallel)
cl = makeCluster(detectCores() - 1)
registerDoParallel(cl)
require(tidyverse)
raw = read_csv("mortgage.csv")
sum(is.na(raw))
df_cleaned = raw %>%
mutate(across(
.cols = everything(),
.fns = ~ {
all_quoted = all(grepl("^'.*'$", .x[!is.na(.x)]))
if (all_quoted) {
as.factor(str_remove_all(.x, "^'|'$"))
} else {
suppressWarnings(as.numeric(.x))
}
}
)
)
df_cleaned$MORTLINE = as.factor(df_cleaned$MORTLINE)
for (i in 1:37) {
if (length(unique(df_cleaned[[i]])) == 1) {
df_cleaned[, i] = NA
}
}
df_cleaned = df_cleaned %>%
select(where(~ !all(is.na(.x))))
df_cleaned = df_cleaned %>%
select(-CONTROL)
set.seed(123)
set_full = df_cleaned %>%
mutate(id = 1:16834)
set_training = set_full %>%
slice_sample(prop = 0.8)
set_test = set_full %>%
anti_join(set_training) %>%
select(-id)
set_training = set_training %>%
select(-id)
require(patchwork)
plots = list()
for (i in 1:29) {
var_name <- names(set_training)[i]
x_var <- set_training[[i]]
if (is.factor(x_var)) {
p = ggplot(set_training, aes(x = factor(.data[[var_name]]), y = INTRATE)) +
geom_boxplot() +
theme_minimal() +
labs(x = var_name, y = "Interest Rate")
} else {
p = ggplot(set_training, aes(x = .data[[var_name]], y = INTRATE)) +
geom_point(alpha = 0.6) +
theme_minimal() +
labs(x = var_name, y = "Interest Rate")
}
plots[[i]] = p
}
print(plots)
model_mlr_full = lm(INTRATE ~ ., data = set_training)
summary(model_mlr_full)
require(glmnet)
set.seed(123)
X = model.matrix(INTRATE ~ ., data = set_training)[, -1]
Y = set_training$INTRATE
model_mlr_lasso = glmnet(X, Y, alpha = 1)
plot(model_mlr_lasso, xvar = "lambda", label = TRUE)
set.seed(123)
cv_model_mlr_lasso = cv.glmnet(X, Y, alpha = 1,
nfolds = 10,
type.measure = "mse",
thresh = 1e-10,
maxit = 1e6,
lambda.min.ratio = 1e-5,
nlambda = 1000)
set.seed(123)
model_mlr_ridge = glmnet(X, Y, alpha = 0)
plot(model_mlr_ridge, xvar = "lambda", label = TRUE)
set.seed(123)
cv_model_mlr_ridge = cv.glmnet(X, Y, alpha = 0,
nfolds = 10,
type.measure = "mse",
thresh = 1e-10,
maxit = 1e6,
lambda.min.ratio = 1e-5,
nlambda = 1000)
model_elastic_net = linear_reg(penalty = tune(), mixture = tune()) %>%
set_engine()
model_elastic_net = linear_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet")
cv_model_mlr_elastic_net = vfold_cv(set_training, v = 10)
workflow_elastic_net = workflow() %>%
add_model(model_elastic_net) %>%
add_recipe(recipe_elastic_net)
recipe_elastic_net = recipe(INTRATE ~ ., data = set_training)
workflow_elastic_net = workflow() %>%
add_model(model_elastic_net) %>%
add_recipe(recipe_elastic_net)
tune_elastic_net = grid_regular(
penalty(range = c(-8, 8)),
mixture(range = c(0, 1)),
levels = c(penalty = 2e6, mixture = 1e5)
)
tuned_elastic_net = tune_grid(
workflow_elastic_net,
resamples = cv_model_mlr_elastic_net,
grid = tune_elastic_net,
metrics = metric_set(rmse)
)
tune_elastic_net = grid_regular(
penalty(range = c(-8, 8)),
mixture(range = c(0, 1)),
levels = c(penalty = 2e6, mixture = 1e5)
)
knitr::opts_chunk$set(echo = TRUE)
require(doParallel)
cl = makeCluster(detectCores() - 1)
registerDoParallel(cl)
tune_elastic_net = grid_regular(
penalty(range = c(-8, 8)),
mixture(range = c(0, 1)),
levels = c(penalty = 1000, mixture = 1000)
)
tuned_elastic_net = tune_grid(
workflow_elastic_net,
resamples = cv_model_mlr_elastic_net,
grid = tune_elastic_net,
metrics = metric_set(rmse)
)
show_notes(.Last.tune.result)
require(tidymodels)
model_elastic_net = linear_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet")
recipe_elastic_net = recipe(INTRATE ~ ., data = set_training)
cv_model_mlr_elastic_net = vfold_cv(set_training, v = 10)
workflow_elastic_net = workflow() %>%
add_model(model_elastic_net) %>%
add_recipe(recipe_elastic_net)
tune_elastic_net = grid_regular(
penalty(range = c(-4, 1)),
mixture(range = c(0, 1)),
levels = c(penalty = 1000, mixture = 1000)
)
tuned_elastic_net = tune_grid(
workflow_elastic_net,
resamples = cv_model_mlr_elastic_net,
grid = tune_elastic_net,
metrics = metric_set(rmse)
)
require(tidymodels)
model_elastic_net = linear_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet")
recipe_elastic_net = recipe(INTRATE ~ ., data = set_training)
cv_model_mlr_elastic_net = vfold_cv(set_training, v = 10)
workflow_elastic_net = workflow() %>%
add_model(model_elastic_net) %>%
add_recipe(recipe_elastic_net)
tune_elastic_net = grid_regular(
penalty(range = c(-4, 1)),
mixture(range = c(0, 1)),
levels = c(penalty = 100, mixture = 100)
)
tuned_elastic_net = tune_grid(
workflow_elastic_net,
resamples = cv_model_mlr_elastic_net,
grid = tune_elastic_net,
metrics = metric_set(rmse)
)
require(tidymodels)
model_elastic_net = linear_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet")
recipe_elastic_net = recipe(INTRATE ~ ., data = set_training)
cv_model_mlr_elastic_net = vfold_cv(set_training, v = 10)
workflow_elastic_net = workflow() %>%
add_model(model_elastic_net) %>%
add_recipe(recipe_elastic_net)
tune_elastic_net = grid_regular(
penalty(range = c(-4, 1)),
mixture(range = c(0, 1)),
levels = c(penalty = 10, mixture = 5)
)
tuned_elastic_net = tune_grid(
workflow_elastic_net,
resamples = cv_model_mlr_elastic_net,
grid = tune_elastic_net,
metrics = metric_set(rmse)
)
show_notes(.Last.tune.result)
set_training$JAMMORT
recipe_elastic_net = recipe(INTRATE ~ ., data = set_training) %>%
step_dummy(all_nominal_predictors())
require(tidymodels)
model_elastic_net = linear_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet")
recipe_elastic_net = recipe(INTRATE ~ ., data = set_training) %>%
step_dummy(all_nominal_predictors())
cv_model_mlr_elastic_net = vfold_cv(set_training, v = 10)
workflow_elastic_net = workflow() %>%
add_model(model_elastic_net) %>%
add_recipe(recipe_elastic_net)
tune_elastic_net = grid_regular(
penalty(range = c(-4, 1)),
mixture(range = c(0, 1)),
levels = c(penalty = 10, mixture = 5)
)
tuned_elastic_net = tune_grid(
workflow_elastic_net,
resamples = cv_model_mlr_elastic_net,
grid = tune_elastic_net,
metrics = metric_set(rmse)
)
collect_metrics(tuned_elastic_net)
select_best(tuned_elastic_net, metric = "rmse")
require(tidymodels)
model_elastic_net = linear_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet")
recipe_elastic_net = recipe(INTRATE ~ ., data = set_training) %>%
step_dummy(all_nominal_predictors())
cv_model_mlr_elastic_net = vfold_cv(set_training, v = 10)
workflow_elastic_net = workflow() %>%
add_model(model_elastic_net) %>%
add_recipe(recipe_elastic_net)
tune_elastic_net = grid_regular(
penalty(range = c(-4, 1)),
mixture(range = c(0, 1)),
levels = c(penalty = 1000, mixture = 1000)
)
tuned_elastic_net = tune_grid(
workflow_elastic_net,
resamples = cv_model_mlr_elastic_net,
grid = tune_elastic_net,
metrics = metric_set(rmse)
)
require(tidymodels)
set.seed(123)
model_elastic_net = linear_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet")
recipe_elastic_net = recipe(INTRATE ~ ., data = set_training) %>%
step_dummy(all_nominal_predictors())
cv_model_mlr_elastic_net = vfold_cv(set_training, v = 10)
workflow_elastic_net = workflow() %>%
add_model(model_elastic_net) %>%
add_recipe(recipe_elastic_net)
tune_elastic_net = grid_regular(
penalty(range = c(-4, 1)),
mixture(range = c(0, 1)),
levels = c(penalty = 1000, mixture = 1000)
)
tuned_elastic_net = tune_grid(
workflow_elastic_net,
resamples = cv_model_mlr_elastic_net,
grid = tune_elastic_net,
metrics = metric_set(rmse)
)
require(tidymodels)
set.seed(123)
model_elastic_net = linear_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet")
recipe_elastic_net = recipe(INTRATE ~ ., data = set_training) %>%
step_dummy(all_nominal_predictors())
cv_model_mlr_elastic_net = vfold_cv(set_training, v = 10)
workflow_elastic_net = workflow() %>%
add_model(model_elastic_net) %>%
add_recipe(recipe_elastic_net)
tune_elastic_net = grid_regular(
penalty(range = c(-4, 1)),
mixture(range = c(0, 1)),
levels = c(penalty = 100, mixture = 100)
)
tuned_elastic_net = tune_grid(
workflow_elastic_net,
resamples = cv_model_mlr_elastic_net,
grid = tune_elastic_net,
metrics = metric_set(rmse)
)
collect_metrics(tuned_elastic_net、)
collect_metrics(tuned_elastic_net)
best_params_elastic_net = select_best(tuned_elastic_net, metric = "rmse")
best_params_elastic_net
rmse = function(actual, pred) {
sqrt(mean((actual - pred) ** 2))
}
pred_mlr = predict(model_mlr_full, newdata = set_test)
pred_mlr
rmse(actual = set_test %>% pull(INTRATE), pred = pred_mlr)
View(tune_elastic_net)
X_test = model.matrix(INTRATE ~ ., data = set_test)[, -1]
pred_lasso = predict(cv_model_mlr_lasso, newx = X_test, s = cv_model_mlr_lasso$lambda.min)
pred_lasso = predict(cv_model_mlr_lasso, newx = X_test, s = cv_model_mlr_lasso$lambda.min)
X_test = model.matrix(INTRATE ~ ., data = set_test)[, -1]
pred_lasso = predict(cv_model_mlr_lasso, newx = X_test, s = cv_model_mlr_lasso$lambda.min)
rmse(actual = set_test %>% pull(INTRATE), pred = pred_lasso)
pred_ridge = predict(cv_model_mlr_ridge, newx = X_test, s = cv_model_mlr_ridge$lambda.min)
rmse(actual = set_test %>% pull(INTRATE), pred = pred_ridge)
workflow_final_elastic_net = finalize_workflow(
workflow_elastic_net,
best_params_elastic_net
)
final_fit = fit(workflow_final_elastic_net, data = set_training)
?predict
predict
pred_elastic_net = predict(final_fit, new_data = set_test)
rmse(actual = set_test %>% pull(INTRATE), pred = pred_elastic_net)
workflow_final_elastic_net = finalize_workflow(
workflow_elastic_net,
best_params_elastic_net
)
final_fit = fit(workflow_final_elastic_net, data = set_training)
pred_elastic_net = predict(final_fit, new_data = set_test)
rmse(actual = set_test %>% pull(INTRATE), pred = pred_elastic_net)
pred_elastic_net
set_test %>% pull(INTRATE)
pred_elastic_net = as.vector(pred_elastic_net)
pred_elastic_net
workflow_final_elastic_net = finalize_workflow(
workflow_elastic_net,
best_params_elastic_net
)
final_fit = fit(workflow_final_elastic_net, data = set_training)
pred_elastic_net = predict(final_fit, new_data = set_test)
pred_elastic_net = as.vector(pred_elastic_net)
rmse(actual = set_test %>% pull(INTRATE), pred = pred_elastic_net)
yardstick::rmse
workflow_final_elastic_net = finalize_workflow(
workflow_elastic_net,
best_params_elastic_net
)
final_fit = fit(workflow_final_elastic_net, data = set_training)
pred_elastic_net = predict(final_fit, new_data = set_test)
pred_elastic_net = as.vector(pred_elastic_net)
rmse(actual = set_test %>% pull(INTRATE), pred = pred_elastic_net)
workflow_final_elastic_net = finalize_workflow(
workflow_elastic_net,
best_params_elastic_net
)
final_fit = fit(workflow_final_elastic_net, data = set_training)
pred_elastic_net = predict(final_fit, new_data = set_test)$.pred
rmse(actual = set_test %>% pull(INTRATE), pred = pred_elastic_net)
knitr::opts_chunk$set(echo = TRUE)
require(doParallel)
cl = makeCluster(detectCores() - 1)
registerDoParallel(cl)
require(tidyverse)
raw = read_csv("mortgage.csv")
sum(is.na(raw))
df_cleaned = raw %>%
mutate(across(
.cols = everything(),
.fns = ~ {
all_quoted = all(grepl("^'.*'$", .x[!is.na(.x)]))
if (all_quoted) {
as.factor(str_remove_all(.x, "^'|'$"))
} else {
suppressWarnings(as.numeric(.x))
}
}
)
)
df_cleaned$MORTLINE = as.factor(df_cleaned$MORTLINE)
for (i in 1:37) {
if (length(unique(df_cleaned[[i]])) == 1) {
df_cleaned[, i] = NA
}
}
df_cleaned = df_cleaned %>%
select(where(~ !all(is.na(.x))))
df_cleaned = df_cleaned %>%
select(-CONTROL)
set.seed(123)
set_full = df_cleaned %>%
mutate(id = 1:16834)
set_training = set_full %>%
slice_sample(prop = 0.8)
set_test = set_full %>%
anti_join(set_training) %>%
select(-id)
set_training = set_training %>%
select(-id)
require(patchwork)
plots = list()
for (i in 1:29) {
var_name <- names(set_training)[i]
x_var <- set_training[[i]]
if (is.factor(x_var)) {
p = ggplot(set_training, aes(x = factor(.data[[var_name]]), y = INTRATE)) +
geom_boxplot() +
theme_minimal() +
labs(x = var_name, y = "Interest Rate")
} else {
p = ggplot(set_training, aes(x = .data[[var_name]], y = INTRATE)) +
geom_point(alpha = 0.6) +
theme_minimal() +
labs(x = var_name, y = "Interest Rate")
}
plots[[i]] = p
}
print(plots)
model_mlr_full = lm(INTRATE ~ ., data = set_training)
summary(model_mlr_full)
require(glmnet)
set.seed(123)
X = model.matrix(INTRATE ~ ., data = set_training)[, -1]
Y = set_training$INTRATE
model_mlr_lasso = glmnet(X, Y, alpha = 1)
plot(model_mlr_lasso, xvar = "lambda", label = TRUE)
set.seed(123)
cv_model_mlr_lasso = cv.glmnet(X, Y, alpha = 1,
nfolds = 10,
type.measure = "mse",
thresh = 1e-10,
maxit = 1e6,
lambda.min.ratio = 1e-5,
nlambda = 1000)
set.seed(123)
model_mlr_ridge = glmnet(X, Y, alpha = 0)
plot(model_mlr_ridge, xvar = "lambda", label = TRUE)
set.seed(123)
cv_model_mlr_ridge = cv.glmnet(X, Y, alpha = 0,
nfolds = 10,
type.measure = "mse",
thresh = 1e-10,
maxit = 1e6,
lambda.min.ratio = 1e-5,
nlambda = 1000)
require(tidymodels)
set.seed(123)
model_elastic_net = linear_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet")
recipe_elastic_net = recipe(INTRATE ~ ., data = set_training) %>%
step_dummy(all_nominal_predictors())
cv_model_mlr_elastic_net = vfold_cv(set_training, v = 10)
workflow_elastic_net = workflow() %>%
add_model(model_elastic_net) %>%
add_recipe(recipe_elastic_net)
tune_elastic_net = grid_regular(
penalty(range = c(-4, 1)),
mixture(range = c(0, 1)),
levels = c(penalty = 100, mixture = 100)
)
tuned_elastic_net = tune_grid(
workflow_elastic_net,
resamples = cv_model_mlr_elastic_net,
grid = tune_elastic_net,
metrics = metric_set(yardstick::rmse)
)
best_params_elastic_net = select_best(tuned_elastic_net, metric = "rmse")
best_params_elastic_net
rmse = function(actual, pred) {
sqrt(mean((actual - pred) ** 2))
}
pred_mlr = predict(model_mlr_full, newdata = set_test)
rmse(actual = set_test %>% pull(INTRATE), pred = pred_mlr)
X_test = model.matrix(INTRATE ~ ., data = set_test)[, -1]
pred_lasso = predict(cv_model_mlr_lasso, newx = X_test, s = cv_model_mlr_lasso$lambda.min)
rmse(actual = set_test %>% pull(INTRATE), pred = pred_lasso)
pred_ridge = predict(cv_model_mlr_ridge, newx = X_test, s = cv_model_mlr_ridge$lambda.min)
rmse(actual = set_test %>% pull(INTRATE), pred = pred_ridge)
workflow_final_elastic_net = finalize_workflow(
workflow_elastic_net,
best_params_elastic_net
)
final_fit = fit(workflow_final_elastic_net, data = set_training)
pred_elastic_net = predict(final_fit, new_data = set_test)$.pred
rmse(actual = set_test %>% pull(INTRATE), pred = pred_elastic_net)
require(tree)
model_tree = tree(INTRATE ~ ., data = set_training, mindev = 1e-4)
plot(model_tree)
text(model_tree, cex = 0.5)
set.seed(123)
cv_model_tree = cv.tree(model_tree)
size_best_pruned_tree = cv_model_tree$size[cv_model_tree$dev == min(cv_model_tree$dev)]
length(size_best_pruned_tree)
size_best_pruned_tree = cv_model_tree$size[which.min(cv_model_tree$dev)]
model_tree_pruned = prune.tree(model_tree, best = size_best_pruned_tree)
require(randomForest)
set.seed(123)
model_rf = rand_forest(mtry = tune(),trees = tune(), min_n = tune()) %>%
set_engine("randomForest") %>%
set_mode("regression")
recipe_rf = recipe(INTRATE ~ ., data = set_training)
workflow_rf = workflow() %>%
add_model(model_rf) %>%
add_recipe(recipe_rf)
cv_model_rf = vfold_cv(set_training, v = 10)
grid_rf = crossing(
mtry = 1:29,
min_n = 5,
trees = seq(100, 1000, by = 100)
)
tuned_rf = tune_grid(
workflow_rf,
resamples = cv_model_rf,
grid = grid_rf,
metrics = metric_set(yardstick::rmse),
control = control_grid(save_pred = TRUE)
)
tuned_rf
saveRDS(tuned_svr, "tuned_svr.rds")
saveRDS(tuned_rf, "tuned_rf.rds")
saveRDS(grid_rf, "grid_rf.rds")
saveRDS(model_rf, "model_rf.rds")
saveRDS(cv_model_rf, "cv_model_rf.rds")
saveRDS(recipe_rf, "recipe_rf.rds")
saveRDS(workflow_rf, "workflow_rf.rds")
tuned_rf
View(tuned_rf)
best_params_rf = select_best(tuned_rf, metric = "rmse")
best_params_rf
best_params_rf
collect_metrics(tuned_rf)
